{"version":3,"sources":["index.tsx"],"names":["React","useNavigation","NavigationGuard","children","canBlur","useRef","navigation","navigationStartCallback","askedForNavigationCallback","navigate","target","params","current","console","log","setAskedForNavigationCallback","fn","setNavigationStartCallback","setCanBlur","arg"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAOA,OAAO,SAASC,eAAT,OAAsD;AAAA,MAA7B;AAACC,IAAAA;AAAD,GAA6B;AAC3D,QAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAN,CAAa,IAAb,CAAhB;AACA,QAAMC,UAAU,GAAGL,aAAa,EAAhC;AACA,QAAMM,uBAAuB,GAAGP,KAAK,CAACK,MAAN,EAAhC;AACA,QAAMG,0BAA0B,GAAGR,KAAK,CAACK,MAAN,EAAnC;;AAEA,iBAAeI,QAAf,CAAwBC,MAAxB,EAAwCC,MAAxC,EAAsD;AACpDH,IAAAA,0BAA0B,CAACI,OAA3B,IAAsCJ,0BAA0B,CAACI,OAA3B,CAAmCF,MAAnC,CAAtC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BV,OAAO,CAACQ,OAAlC;;AAEA,QAAIR,OAAO,CAACQ,OAAR,KAAoB,IAAxB,EAA8B;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcJ,MAA1B;;AACA,UAAIN,OAAO,CAACQ,OAAR,KAAoB,IAAxB,EAA8B;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCJ,MAAlD;AACAH,QAAAA,uBAAuB,CAACK,OAAxB,KAAoC,MAAML,uBAAuB,CAACK,OAAxB,EAA1C;AACAN,QAAAA,UAAU,CAACG,QAAX,CAAoBC,MAApB,EAA4BC,MAA5B;AACD;;AACDP,MAAAA,OAAO,CAACQ,OAAR,GAAkB,IAAlB;AACD;AACF;;AAED,WAASG,6BAAT,CAAuCC,EAAvC,EAAiE;AAC/DR,IAAAA,0BAA0B,CAACI,OAA3B,GAAqCI,EAArC;AACD;;AAED,WAASC,0BAAT,CAAoCD,EAApC,EAA8D;AAC5DT,IAAAA,uBAAuB,CAACK,OAAxB,GAAkCI,EAAlC;AACD;;AAED,WAASE,UAAT,CAAoBC,GAApB,EAAkC;AAChCf,IAAAA,OAAO,CAACQ,OAAR,GAAkB,CAAC,CAACO,GAApB;AACD;;AAED,sBAAO,0CAAGhB,QAAQ,CAAC;AAACM,IAAAA,QAAD;AAAWM,IAAAA,6BAAX;AAA0CE,IAAAA,0BAA1C;AAAsEC,IAAAA;AAAtE,GAAD,CAAX,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\n\ntype RootStackParamList = {\n  [key: string]: any;\n};\n\nexport function NavigationGuard({children}: {children: any}) {\n  const canBlur = React.useRef(true);\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n  const navigationStartCallback = React.useRef<(arg?: string) => unknown>();\n  const askedForNavigationCallback = React.useRef<(arg?: string) => unknown>();\n\n  async function navigate(target: string, params?: any) {\n    askedForNavigationCallback.current && askedForNavigationCallback.current(target);\n    console.log('can-blur: ', canBlur.current);\n\n    if (canBlur.current === true) {\n      console.log('going to ' + target);\n      if (canBlur.current === true) {\n        console.log('exectuing navigationStart cb for ' + target);\n        navigationStartCallback.current && (await navigationStartCallback.current());\n        navigation.navigate(target, params);\n      }\n      canBlur.current = true;\n    }\n  }\n\n  function setAskedForNavigationCallback(fn: (to: string) => void) {\n    askedForNavigationCallback.current = fn;\n  }\n\n  function setNavigationStartCallback(fn: (to: string) => void) {\n    navigationStartCallback.current = fn;\n  }\n\n  function setCanBlur(arg: boolean) {\n    canBlur.current = !!arg;\n  }\n\n  return <>{children({navigate, setAskedForNavigationCallback, setNavigationStartCallback, setCanBlur})}</>;\n}\n"]}